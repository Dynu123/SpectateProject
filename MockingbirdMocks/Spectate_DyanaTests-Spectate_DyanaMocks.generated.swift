//
//  Spectate_DyanaTests-Spectate_DyanaMocks.generated.swift
//  Spectate_Dyana
//
//  Generated by Mockingbird v0.20.0.
//  DO NOT EDIT
//

@testable import Mockingbird
@testable import Spectate_Dyana
import Combine
import Foundation
import Kingfisher
import Swift
import SwiftUI

private let mkbGenericStaticMockContext = Mockingbird.GenericStaticMockContext()

// MARK: - Mocked PriceDatasource
public final class PriceDatasourceMock: Spectate_Dyana.PriceDatasource, Mockingbird.Mock {
  typealias MockingbirdSupertype = Spectate_Dyana.PriceDatasource
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "Spectate_Dyana"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    PriceDatasourceMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `getAllPrices`(`displayCurrency`: String, `sparkLine`: Bool, `completion`: @escaping (Result<[Spectate_Dyana.Price], Spectate_Dyana.ServiceError>, Int?) -> Void)
  public func `getAllPrices`(`displayCurrency`: String, `sparkLine`: Bool, `completion`: @escaping (Result<[Spectate_Dyana.Price], Spectate_Dyana.ServiceError>, Int?) -> Void) -> Void {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`getAllPrices`(`displayCurrency`: String, `sparkLine`: Bool, `completion`: @escaping (Result<[Spectate_Dyana.Price], Spectate_Dyana.ServiceError>, Int?) -> Void) -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`displayCurrency`), Mockingbird.ArgumentMatcher(`sparkLine`), Mockingbird.ArgumentMatcher(`completion`)], returnType: Swift.ObjectIdentifier((Void).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (String, Bool, @escaping (Result<[Spectate_Dyana.Price], Spectate_Dyana.ServiceError>, Int?) -> Void) -> Void { return mkbImpl(`displayCurrency`, `sparkLine`, `completion`) }
      if let mkbImpl = mkbImpl as? () -> Void { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Void = mkbObject.`getAllPrices`(displayCurrency: `displayCurrency`, sparkLine: `sparkLine`, completion: `completion`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Void).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `getAllPrices`(`displayCurrency`: @autoclosure () -> String, `sparkLine`: @autoclosure () -> Bool, `completion`: @autoclosure () -> (Result<[Spectate_Dyana.Price], Spectate_Dyana.ServiceError>, Int?) -> Void) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String, Bool, @escaping (Result<[Spectate_Dyana.Price], Spectate_Dyana.ServiceError>, Int?) -> Void) -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String, Bool, @escaping (Result<[Spectate_Dyana.Price], Spectate_Dyana.ServiceError>, Int?) -> Void) -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`getAllPrices`(`displayCurrency`: String, `sparkLine`: Bool, `completion`: @escaping (Result<[Spectate_Dyana.Price], Spectate_Dyana.ServiceError>, Int?) -> Void) -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`displayCurrency`), Mockingbird.resolve(`sparkLine`), Mockingbird.resolve(`completion`)], returnType: Swift.ObjectIdentifier((Void).self)))
  }
}

/// Returns a concrete mock of `PriceDatasource`.
public func mock(_ type: Spectate_Dyana.PriceDatasource.Protocol, file: StaticString = #file, line: UInt = #line) -> PriceDatasourceMock {
  return PriceDatasourceMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}
